{"version":3,"sources":["candy-machine.ts","fair-launch.ts","connection.tsx","utils.ts","userSettings.tsx","PhaseHeader.tsx","MintButton.tsx","countdown.tsx","Minter.tsx","confetti.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","goLiveDate","Date","getTime","endSettings","endSettingType","date","number","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","LotteryState","FAIR_LAUNCH_PROGRAM","getFairLaunchState","fairLaunchId","fairLaunch","getFairLaunchTicket","fairLaunchTicket","bump","fairLaunchData","getBalance","lotteryData","Uint8Array","getFairLaunchLotteryBitmap","fairLaunchLotteryBitmap","fairLaunchLotteryBitmapObj","ticket","lottery","punchTicket","buyerTokenAccount","amount","gt","currentMedian","getSetupForTicketing","rpc","adjustTicket","__private","logAccounts","accountExists","buyer","anchorProgram","ticketKey","amountLamports","treasuryMint","Math","ceil","LAMPORTS_PER_SOL","priceRangeStart","amountNumber","fees","getFairLaunchTicketSeqLookup","seq","fairLaunchTicketSeqLookup","seqBump","createTicketSeq","purchaseTicket","toBase58","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","FAIR_LAUNCH_PROGRAM_ID","toDate","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asNumber","toArrayLike","formatSol","sol","Phase","welcomeSettings","title","desc","title2","desc2","countdownEnable","countdownTo","whitelistSettings","enabled","startDate","endDate","countdown","publicSaleSettings","walletSettings","showAddress","showBalance","whiteListTokenId","CTAButton","styled","Button","MintButton","onMint","isMinting","fairLaunchBalance","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","whitelistStartDate","whitelistEndDate","publicMintStart","publicMintEnd","whiteListSaleCheck","now","WhitelistMintActive","publicSaleCheck","PublicMintActive","useEffect","GatewayStatus","ACTIVE","disabled","onClick","token","variant","punched","CircularProgress","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","PhaseCountdown","start","end","onComplete","classes","isFixed","renderCountdown","days","hours","minutes","seconds","completed","className","Paper","elevation","renderer","getPhase","curr","whiteListStart","whiteListEnd","publicSaleStart","PublicMint","WhiteListMint","Welcome","Header","props","phaseName","Grid","container","xs","direction","Typography","PhaseHeader","phase","candyMachinePredatesFairLaunch","rpcUrl","useWallet","ConnectButton","WalletDialogButton","MintContainer","div","isWinner","phaseThreeStarted","myByte","floor","positionFromRight","pow","Home","setFairLaunchBalance","yourSOLBalance","setYourSOLBalance","rpcHost","setIsMinting","contributed","setContributed","useMemo","signTransaction","open","severity","alertState","setAlertState","setFairLaunch","setCandyMachine","document","getElementById","click","connected","unpunched","onPunchTicket","mintTxId","txTimeout","msg","code","window","location","reload","indexOf","balance","getTokenAccountBalance","whiteListTokens","uiAmount","SetPrice","ticks","priceRangeEnd","tickSize","randomTick","round","random","cndy","min","max","median","label","filter","_","onRefundTicket","phaseTwoEnd","lt","fee","Container","maxWidth","position","backgroundColor","clusterUrl","options","autoShowModal","withdrawn","includes","toLocaleString","Snackbar","autoHideDuration","onClose","Alert","ConfettiContext","React","createContext","ConfettiProvider","children","canvasRef","useRef","confettiRef","dropConfetti","current","visibility","particleCount","spread","origin","y","finally","confetti","create","resize","useWorker","Provider","ref","zIndex","top","left","createTheme","palette","type","process","REACT_APP_FAIR_LAUNCH_ID","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","href","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","Minter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9930cacf.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport { sendTransactions } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | [number, anchor.BN];\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive:\r\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\r\n        (state.endSettings\r\n          ? state.endSettings.endSettingType.date\r\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n            : itemsRedeemed < state.endSettings.number.toNumber()\r\n          : true),\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<(string | undefined)[]> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken,\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1,\r\n          ),\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            [],\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber(),\r\n      ),\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions, cleanupInstructions],\r\n        [signers, []],\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { LAMPORTS_PER_SOL, TransactionInstruction } from '@solana/web3.js';\r\nimport {\r\n  createAssociatedTokenAccountInstruction,\r\n  getAtaForMint,\r\n  getFairLaunchTicketSeqLookup,\r\n} from './utils';\r\n\r\nexport const FAIR_LAUNCH_PROGRAM = new anchor.web3.PublicKey(\r\n  'faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j',\r\n);\r\n\r\nexport interface FairLaunchAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: FairLaunchState;\r\n\r\n  ticket: {\r\n    pubkey: anchor.web3.PublicKey;\r\n    bump: number;\r\n    data?: FairLaunchTicket;\r\n  };\r\n  lottery: {\r\n    pubkey: anchor.web3.PublicKey;\r\n    data?: Uint8Array;\r\n  };\r\n  treasury: number;\r\n}\r\n\r\nexport interface FairLaunchTicket {\r\n  fairLaunch: anchor.web3.PublicKey;\r\n  buyer: anchor.web3.PublicKey;\r\n  amount: anchor.BN;\r\n  state: {\r\n    punched?: {};\r\n    unpunched?: {};\r\n    withdrawn?: {};\r\n    no_sequence_struct: {};\r\n  };\r\n  bump: number;\r\n  seq: anchor.BN;\r\n}\r\n\r\nexport interface AntiRugSetting {\r\n  reserveBp: number;\r\n  tokenRequirement: anchor.BN;\r\n  selfDestructDate: anchor.BN;\r\n}\r\nexport interface FairLaunchState {\r\n  authority: anchor.web3.PublicKey;\r\n  bump: number;\r\n\r\n  currentMedian: anchor.BN;\r\n  currentEligibleHolders: anchor.BN;\r\n  data: {\r\n    antiRugSetting?: AntiRugSetting;\r\n    fee: anchor.BN;\r\n    numberOfTokens: anchor.BN;\r\n    phaseOneEnd: anchor.BN;\r\n    phaseOneStart: anchor.BN;\r\n    phaseTwoEnd: anchor.BN;\r\n    priceRangeEnd: anchor.BN;\r\n    priceRangeStart: anchor.BN;\r\n    lotteryDuration: anchor.BN;\r\n    tickSize: anchor.BN;\r\n    uuid: string;\r\n  };\r\n  numberTicketsDropped: anchor.BN;\r\n  numberTicketsPunched: anchor.BN;\r\n  numberTicketsSold: anchor.BN;\r\n  numberTicketsUnSeqed: anchor.BN;\r\n  numberTokensBurnedForRefunds: anchor.BN;\r\n  numberTokensPreminted: anchor.BN;\r\n  phaseThreeStarted: boolean;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  tokenMintBump: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  treasuryBump: number;\r\n  treasuryMint: anchor.web3.PublicKey; // only for SPL tokens\r\n  treasurySnapshot: null;\r\n}\r\n\r\nexport enum LotteryState {\r\n  Brewing = 'Brewing',\r\n  Finished = 'Finished',\r\n  PastDue = 'Past Due',\r\n}\r\n\r\nexport const getLotteryState = (\r\n  phaseThree: boolean | undefined,\r\n  lottery: Uint8Array | null,\r\n  lotteryDuration: anchor.BN,\r\n  phaseTwoEnd: anchor.BN,\r\n): LotteryState => {\r\n  if (\r\n    !phaseThree &&\r\n    (!lottery || lottery.length === 0) &&\r\n    phaseTwoEnd.add(lotteryDuration).lt(new anchor.BN(Date.now() / 1000))\r\n  ) {\r\n    return LotteryState.PastDue;\r\n  } else if (phaseThree) {\r\n    return LotteryState.Finished;\r\n  } else {\r\n    return LotteryState.Brewing;\r\n  }\r\n};\r\n\r\nexport const getFairLaunchState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  fairLaunchId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<FairLaunchAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(FAIR_LAUNCH_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, FAIR_LAUNCH_PROGRAM, provider);\r\n  const state: any = await program.account.fairLaunch.fetch(fairLaunchId);\r\n\r\n  const [fairLaunchTicket, bump] = await getFairLaunchTicket(\r\n    //@ts-ignore\r\n    state.tokenMint,\r\n    anchorWallet.publicKey,\r\n  );\r\n\r\n  let fairLaunchData: any;\r\n\r\n  try {\r\n    fairLaunchData = await program.account.fairLaunchTicket.fetch(\r\n      fairLaunchTicket,\r\n    );\r\n  } catch {\r\n    console.log('No ticket');\r\n  }\r\n\r\n  const treasury = await program.provider.connection.getBalance(state.treasury);\r\n\r\n  let lotteryData: Uint8Array = new Uint8Array([]);\r\n  let fairLaunchLotteryBitmap = (\r\n    await getFairLaunchLotteryBitmap(\r\n      //@ts-ignore\r\n      state.tokenMint,\r\n    )\r\n  )[0];\r\n\r\n  try {\r\n    const fairLaunchLotteryBitmapObj =\r\n      await program.provider.connection.getAccountInfo(fairLaunchLotteryBitmap);\r\n\r\n    lotteryData = new Uint8Array(fairLaunchLotteryBitmapObj?.data || []);\r\n  } catch (e) {\r\n    console.log('Could not find fair launch lottery.');\r\n    console.log(e);\r\n  }\r\n\r\n  return {\r\n    id: fairLaunchId,\r\n    state,\r\n    program,\r\n    ticket: {\r\n      pubkey: fairLaunchTicket,\r\n      bump,\r\n      data: fairLaunchData,\r\n    },\r\n    lottery: {\r\n      pubkey: fairLaunchLotteryBitmap,\r\n      data: lotteryData,\r\n    },\r\n    treasury,\r\n  };\r\n};\r\n\r\nexport const punchTicket = async (\r\n  anchorWallet: anchor.Wallet,\r\n  fairLaunch: FairLaunchAccount,\r\n) => {\r\n  const fairLaunchTicket = (\r\n    await getFairLaunchTicket(\r\n      //@ts-ignore\r\n      fairLaunch.state.tokenMint,\r\n      anchorWallet.publicKey,\r\n    )\r\n  )[0];\r\n\r\n  const ticket = fairLaunch.ticket.data;\r\n\r\n  const fairLaunchLotteryBitmap = ( //@ts-ignore\r\n    await getFairLaunchLotteryBitmap(fairLaunch.state.tokenMint)\r\n  )[0];\r\n\r\n  const buyerTokenAccount = (\r\n    await getAtaForMint(\r\n      //@ts-ignore\r\n      fairLaunch.state.tokenMint,\r\n      anchorWallet.publicKey,\r\n    )\r\n  )[0];\r\n\r\n  if (ticket?.amount.gt(fairLaunch.state.currentMedian)) {\r\n    console.log(\r\n      'Adjusting down...',\r\n      ticket?.amount.toNumber(),\r\n      fairLaunch.state.currentMedian.toNumber(),\r\n    );\r\n    const { remainingAccounts, instructions, signers } =\r\n      await getSetupForTicketing(\r\n        fairLaunch.program,\r\n        fairLaunch.state.currentMedian.toNumber(),\r\n        anchorWallet,\r\n        fairLaunch,\r\n        fairLaunchTicket,\r\n      );\r\n    await fairLaunch.program.rpc.adjustTicket(fairLaunch.state.currentMedian, {\r\n      accounts: {\r\n        fairLaunchTicket,\r\n        fairLaunch: fairLaunch.id,\r\n        fairLaunchLotteryBitmap,\r\n        //@ts-ignore\r\n        treasury: fairLaunch.state.treasury,\r\n        systemProgram: anchor.web3.SystemProgram.programId,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n      },\r\n      __private: { logAccounts: true },\r\n      instructions: instructions.length > 0 ? instructions : undefined,\r\n      remainingAccounts: [\r\n        {\r\n          pubkey: anchorWallet.publicKey,\r\n          isSigner: true,\r\n          isWritable: true,\r\n        },\r\n        ...remainingAccounts,\r\n      ],\r\n      signers,\r\n    });\r\n  }\r\n\r\n  const accountExists =\r\n    await fairLaunch.program.provider.connection.getAccountInfo(\r\n      buyerTokenAccount,\r\n    );\r\n\r\n  const instructions = !accountExists\r\n    ? [\r\n        createAssociatedTokenAccountInstruction(\r\n          buyerTokenAccount,\r\n          anchorWallet.publicKey,\r\n          anchorWallet.publicKey,\r\n          //@ts-ignore\r\n          fairLaunch.state.tokenMint,\r\n        ),\r\n      ]\r\n    : [];\r\n\r\n  await fairLaunch.program.rpc.punchTicket({\r\n    accounts: {\r\n      fairLaunchTicket,\r\n      fairLaunch: fairLaunch.id,\r\n      fairLaunchLotteryBitmap,\r\n      payer: anchorWallet.publicKey,\r\n      buyerTokenAccount,\r\n      //@ts-ignore\r\n      tokenMint: fairLaunch.state.tokenMint,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n    },\r\n    instructions: instructions.length > 0 ? instructions : undefined,\r\n  });\r\n};\r\n\r\nexport const getFairLaunchTicket = async (\r\n  tokenMint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\r\n    FAIR_LAUNCH_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const getFairLaunchLotteryBitmap = async (\r\n  tokenMint: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('lottery')],\r\n    FAIR_LAUNCH_PROGRAM,\r\n  );\r\n};\r\n\r\nconst getSetupForTicketing = async (\r\n  anchorProgram: anchor.Program,\r\n  amount: number,\r\n  anchorWallet: anchor.Wallet,\r\n  fairLaunch: FairLaunchAccount | undefined,\r\n  ticketKey: anchor.web3.PublicKey,\r\n): Promise<{\r\n  remainingAccounts: {\r\n    pubkey: anchor.web3.PublicKey | null;\r\n    isWritable: boolean;\r\n    isSigner: boolean;\r\n  }[];\r\n  instructions: TransactionInstruction[];\r\n  signers: anchor.web3.Keypair[];\r\n  amountLamports: number;\r\n}> => {\r\n  if (!fairLaunch) {\r\n    return {\r\n      remainingAccounts: [],\r\n      instructions: [],\r\n      signers: [],\r\n      amountLamports: 0,\r\n    };\r\n  }\r\n  const ticket = fairLaunch.ticket;\r\n\r\n  const remainingAccounts = [];\r\n  const instructions = [];\r\n  const signers = [];\r\n\r\n  let amountLamports = 0;\r\n  //@ts-ignore\r\n  if (!fairLaunch.state.treasuryMint) {\r\n    if (!ticket && amount === 0) {\r\n      amountLamports = fairLaunch.state.data.priceRangeStart.toNumber();\r\n    } else {\r\n      amountLamports = Math.ceil(amount * LAMPORTS_PER_SOL);\r\n    }\r\n  } else {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n    signers.push(transferAuthority);\r\n    // NOTE this token impl will not work till you get decimal mantissa and multiply...\r\n    /// ex from cli wont work since you dont have a Signer, but an anchor.Wallet\r\n    /*\r\n    const token = new Token(\r\n        anchorProgram.provider.connection,\r\n        //@ts-ignore\r\n        fairLaunchObj.treasuryMint,\r\n        TOKEN_PROGRAM_ID,\r\n        walletKeyPair,\r\n      );\r\n      const mintInfo = await token.getMintInfo();\r\n      amountNumber = Math.ceil(amountNumber * 10 ** mintInfo.decimals);\r\n    */\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        //@ts-ignore\r\n        fairLaunch.state.treasuryMint,\r\n        transferAuthority.publicKey,\r\n        anchorWallet.publicKey,\r\n        [],\r\n        //@ts-ignore\r\n\r\n        // TODO: get mint decimals\r\n        amountNumber + fairLaunch.state.data.fees.toNumber(),\r\n      ),\r\n    );\r\n\r\n    remainingAccounts.push({\r\n      //@ts-ignore\r\n      pubkey: fairLaunch.state.treasuryMint,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getAtaForMint(\r\n          //@ts-ignore\r\n          fairLaunch.state.treasuryMint,\r\n          anchorWallet.publicKey,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    });\r\n  }\r\n\r\n  if (ticket.data) {\r\n    const [fairLaunchTicketSeqLookup, seqBump] =\r\n      await getFairLaunchTicketSeqLookup(\r\n        fairLaunch.state.tokenMint,\r\n        ticket.data?.seq,\r\n      );\r\n\r\n    const seq = await anchorProgram.provider.connection.getAccountInfo(\r\n      fairLaunchTicketSeqLookup,\r\n    );\r\n    if (!seq) {\r\n      instructions.push(\r\n        await anchorProgram.instruction.createTicketSeq(seqBump, {\r\n          accounts: {\r\n            fairLaunchTicketSeqLookup,\r\n            fairLaunch: fairLaunch.id,\r\n            fairLaunchTicket: ticketKey,\r\n            payer: anchorWallet.publicKey,\r\n            systemProgram: anchor.web3.SystemProgram.programId,\r\n            rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n          },\r\n          signers: [],\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n  return {\r\n    remainingAccounts,\r\n    instructions,\r\n    signers,\r\n    amountLamports,\r\n  };\r\n};\r\n\r\nexport const receiveRefund = async (\r\n  anchorWallet: anchor.Wallet,\r\n  fairLaunch: FairLaunchAccount | undefined,\r\n) => {\r\n  if (!fairLaunch) {\r\n    return;\r\n  }\r\n\r\n  const buyerTokenAccount = (\r\n    await getAtaForMint(fairLaunch.state.tokenMint, anchorWallet.publicKey)\r\n  )[0];\r\n\r\n  const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n  const signers = [transferAuthority];\r\n  const instructions = [\r\n    Token.createApproveInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      buyerTokenAccount,\r\n      transferAuthority.publicKey,\r\n      anchorWallet.publicKey,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  const remainingAccounts = [];\r\n\r\n  if (fairLaunch.state.treasuryMint) {\r\n    remainingAccounts.push({\r\n      pubkey: fairLaunch.state.treasuryMint,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getAtaForMint(\r\n          fairLaunch.state.treasuryMint,\r\n          anchorWallet.publicKey,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n  }\r\n\r\n  console.log(\r\n    'tfr',\r\n    fairLaunch.state.treasury.toBase58(),\r\n    anchorWallet.publicKey.toBase58(),\r\n    buyerTokenAccount.toBase58(),\r\n  );\r\n  await fairLaunch.program.rpc.receiveRefund({\r\n    accounts: {\r\n      fairLaunch: fairLaunch.id,\r\n      treasury: fairLaunch.state.treasury,\r\n      buyer: anchorWallet.publicKey,\r\n      buyerTokenAccount,\r\n      transferAuthority: transferAuthority.publicKey,\r\n      tokenMint: fairLaunch.state.tokenMint,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n    },\r\n\r\n    __private: { logAccounts: true },\r\n    remainingAccounts,\r\n    instructions,\r\n    signers,\r\n  });\r\n};\r\nexport const purchaseTicket = async (\r\n  amount: number,\r\n  anchorWallet: anchor.Wallet,\r\n  fairLaunch: FairLaunchAccount | undefined,\r\n) => {\r\n  if (!fairLaunch) {\r\n    return;\r\n  }\r\n\r\n  const ticket = fairLaunch.ticket.data;\r\n\r\n  const [fairLaunchTicket, bump] = await getFairLaunchTicket(\r\n    //@ts-ignore\r\n    fairLaunch.state.tokenMint,\r\n    anchorWallet.publicKey,\r\n  );\r\n\r\n  const { remainingAccounts, instructions, signers, amountLamports } =\r\n    await getSetupForTicketing(\r\n      fairLaunch.program,\r\n      amount,\r\n      anchorWallet,\r\n      fairLaunch,\r\n      fairLaunchTicket,\r\n    );\r\n\r\n  if (ticket) {\r\n    const fairLaunchLotteryBitmap = //@ts-ignore\r\n    (await getFairLaunchLotteryBitmap(fairLaunch.state.tokenMint))[0];\r\n    console.log(\r\n      'Anchor wallet',\r\n      anchorWallet.publicKey.toBase58(),\r\n      amountLamports,\r\n    );\r\n    await fairLaunch.program.rpc.adjustTicket(new anchor.BN(amountLamports), {\r\n      accounts: {\r\n        fairLaunchTicket,\r\n        fairLaunch: fairLaunch.id,\r\n        fairLaunchLotteryBitmap,\r\n        //@ts-ignore\r\n        treasury: fairLaunch.state.treasury,\r\n        systemProgram: anchor.web3.SystemProgram.programId,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n      },\r\n      __private: { logAccounts: true },\r\n      remainingAccounts: [\r\n        {\r\n          pubkey: anchorWallet.publicKey,\r\n          isSigner: true,\r\n          isWritable: true,\r\n        },\r\n        ...remainingAccounts,\r\n      ],\r\n      signers,\r\n      instructions: instructions.length > 0 ? instructions : undefined,\r\n    });\r\n\r\n    return;\r\n  }\r\n  try {\r\n    console.log('Amount', amountLamports);\r\n    await fairLaunch.program.rpc.purchaseTicket(\r\n      bump,\r\n      new anchor.BN(amountLamports),\r\n      {\r\n        accounts: {\r\n          fairLaunchTicket,\r\n          fairLaunch: fairLaunch.id,\r\n          //@ts-ignore\r\n          treasury: fairLaunch.state.treasury,\r\n          buyer: anchorWallet.publicKey,\r\n          payer: anchorWallet.publicKey,\r\n          systemProgram: anchor.web3.SystemProgram.programId,\r\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        },\r\n        //__private: { logAccounts: true },\r\n        remainingAccounts,\r\n        signers,\r\n        instructions: instructions.length > 0 ? instructions : undefined,\r\n      },\r\n    );\r\n  } catch (e) {\r\n    console.log(e);\r\n    throw e;\r\n  }\r\n};\r\n\r\nexport const withdrawFunds = async (\r\n  anchorWallet: anchor.Wallet,\r\n  fairLaunch: FairLaunchAccount | undefined,\r\n) => {\r\n  if (!fairLaunch) {\r\n    return;\r\n  }\r\n\r\n  // TODO: create sequence ticket\r\n\r\n  const remainingAccounts = [];\r\n\r\n  //@ts-ignore\r\n  if (fairLaunch.state.treasuryMint) {\r\n    remainingAccounts.push({\r\n      //@ts-ignore\r\n      pubkey: fairLaunch.state.treasuryMint,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getAtaForMint(\r\n          //@ts-ignore\r\n          fairLaunch.state.treasuryMint,\r\n          anchorWallet.publicKey,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    });\r\n  }\r\n\r\n  await fairLaunch.program.rpc.withdrawFunds({\r\n    accounts: {\r\n      fairLaunch: fairLaunch.id,\r\n      // @ts-ignore\r\n      treasury: fairLaunch.state.treasury,\r\n      authority: anchorWallet.publicKey,\r\n      // @ts-ignore\r\n      tokenMint: fairLaunch.state.tokenMint,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n    },\r\n    remainingAccounts,\r\n  });\r\n};\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = [];\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n\r\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  let breakEarlyObject = { breakEarly: false, i: 0 };\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    signedTxnPromise\r\n      .then(({ txid, slot }) => {\r\n        successCallback(txid, i);\r\n      })\r\n      .catch(reason => {\r\n        // @ts-ignore\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          breakEarlyObject.breakEarly = true;\r\n          breakEarlyObject.i = i;\r\n        }\r\n      });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise;\r\n      } catch (e) {\r\n        console.log('Caught failure', e);\r\n        if (breakEarlyObject.breakEarly) {\r\n          console.log('Died on ', breakEarlyObject.i);\r\n          // Return the txn we failed on by index\r\n          return {\r\n            number: breakEarlyObject.i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    await Promise.all(pendingTxns);\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) { }\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const FAIR_LAUNCH_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j',\r\n);\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\nexport const getFairLaunchTicketSeqLookup = async (\r\n  tokenMint: anchor.web3.PublicKey,\r\n  seq: anchor.BN,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      Buffer.from('fair_launch'),\r\n      tokenMint.toBuffer(),\r\n      seq.toArrayLike(Buffer, 'le', 8),\r\n    ],\r\n    FAIR_LAUNCH_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getFairLaunchTicket = async (\r\n  tokenMint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\r\n    FAIR_LAUNCH_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport function formatSol(sol:number){\r\n    var formated = sol / 1000000000\r\n    return formated\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { WhitelistSettings, PublicSaleSettings, WelcomeSettings, WalletSettings } from './userSettingsInterfaces'\r\n\r\nfunction date(date: string){\r\n  let f = new anchor.BN(new Date(date).getTime() / 1000)\r\n  return f\r\n}\r\n\r\n// \r\n// Below are settings that will trigger the UI of the mint box currently. This is a basic\r\n// implementation to start with but incorporates whitelist minting sales by turning on\r\n// the mint function between to dates. This will allow users to mint while the candy machine\r\n// is still in it's off state allowing minting via SLP tokens.\r\n//\r\n// You can play with the settings below and also the CMv2 start time setting to trigger different\r\n// the different UI modes.\r\n//\r\n//  This is the current UI set up below and the new phases.\r\n//  \r\n//    Welcome (disconnected wallet) -> Welcome (connected Wallet)\r\n//    Whitelist Countdown (if enabled) -> Whitelist Minting (if enabled)\r\n//    Public Minting\r\n// \r\n//    any settings you are not using need to be set as 'undefined' without quotetation marks\r\n//    \r\n//         title: undefined\r\n//    \r\n//    for dates use the following format\r\n//    \r\n//        date('1 Jan 2020 00:00:00 <timezone>')\r\n//\r\n//\r\n//\r\n\r\n\r\n///                             ///\r\n///      Welcome Settings       ///\r\n///                             ///\r\n\r\nexport const welcomeSettings: WelcomeSettings = {\r\n\r\n  \r\n  //Wallet Disconected Title and Description\r\n    title: 'Welcome!',\r\n    desc: 'Connect your wallet and load in! Whitelist mint starts soon!',\r\n\r\n  //Wallet Connected Title and Description\r\n    title2: 'Welcome (Connected) ',\r\n    desc2:'Congratulations! You connected your wallet',\r\n\r\n  // Countdown Timer\r\n    countdownEnable: false,\r\n    countdownTo: date('2 Jan 2022 00:00:00 GMT'),\r\n    //Example date below\r\n    // date('29 2021 00:00:00 GMT')\r\n\r\n\r\n}\r\n\r\n\r\n\r\n///                             ///\r\n///   Whitelist Sale Settings   ///\r\n///                             ///\r\n\r\n// The white list does NOTHING to the candy machine itself. It just enables the mint button\r\n// on the site so people can purchase as long as you have the SLP token's set up for you\r\n// whitelist. If your candy machine is not set up for SLP token whitelist purchasing then\r\n// all transations will fail, all transactions will fail for people who also do not hold the\r\n// SLP token. This also does not stop people minting directly from the program.\r\n\r\nexport const whitelistSettings: WhitelistSettings = {\r\n\r\n  //If you want to use the whitelist feature enable it.\r\n    enabled: true,\r\n\r\n    startDate: date('1 Jan 2022 00:00:00 GMT'),\r\n    endDate: date('2 Jan 2022 00:00:00 GMT'),\r\n    countdown: true,\r\n    //Example date below\r\n    // date('29 2021 00:00:00 GMT')\r\n    \r\n\r\n  //Wallet Connected Title and Description\r\n      title: 'White List (connected)',\r\n      desc: 'White list area with wallet connected',\r\n\r\n  //Wallet Disconected Title and Description\r\n      title2: 'White List (disconected)',\r\n      desc2:'White list area with disconected wallet',\r\n\r\n  //Enable stats\r\n      itemsAvailable: true,\r\n      itemsRemaining: true,\r\n      itemsRedeemed: true,\r\n\r\n}\r\n\r\n///                             ///\r\n///     Public Sale Settings    ///\r\n///                             ///\r\n\r\n\r\nexport const publicSaleSettings: PublicSaleSettings = {\r\n\r\n    //start date and end date must match your Candy Machine Config for public launch!\r\n\r\n    startDate: date('2 Jan 2022 00:00:00 GMT'),\r\n    endDate: undefined,\r\n    countdown: false,\r\n    //Example date below\r\n    // date('29 2021 00:00:00 GMT')\r\n\r\n  \r\n  //Wallet Connected Title and Description\r\n  title: 'Public Sale',\r\n  desc: 'This is the public sale Wallet Connected',\r\n  \r\n  \r\n  //Wallet Disconnected Title and Description\r\n  title2: ' Public Sale (disconnected)',\r\n  desc2:'This is a public sale with wallet disconnected',\r\n\r\n  //Enable stats\r\n  itemsAvailable: true,\r\n  itemsRemaining: true,\r\n  itemsRedeemed: true,\r\n\r\n}\r\n\r\nexport const walletSettings: WalletSettings = {\r\n\r\n  showAddress: true,\r\n  showBalance: false,\r\n  whiteListTokenId: new anchor.web3.PublicKey('E5BuTQcD22n6FyC2RWMtVNH2uZVNqAcy5855P8GrTxx4')\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import * as anchor from '@project-serum/anchor';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { PhaseCountdown } from './countdown';\r\nimport { toDate } from './utils';\r\nimport { FairLaunchAccount } from './fair-launch';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { publicSaleSettings, whitelistSettings, welcomeSettings } from './userSettings';\r\n\r\nexport enum Phase {\r\n  AnticipationPhase, // FL, AKA Phase 0\r\n  SetPrice, // FL, AKA Phase 1\r\n  GracePeriod, // FL, AKA Phase 2\r\n  Lottery, // FL\r\n  RaffleFinished, // FL, AKA Phase 3\r\n  WaitForCM, // FL,\r\n  Phase4,\r\n  MintOff,\r\n  WhiteListMint,\r\n  PublicMint,\r\n  Welcome,\r\n}\r\n\r\nexport function getPhase(\r\n  fairLaunch: FairLaunchAccount | undefined,\r\n  candyMachine: CandyMachineAccount | undefined,\r\n): Phase {\r\n  const curr = new Date().getTime();\r\n  const candyMachineGoLive = toDate(candyMachine?.state.goLiveDate)?.getTime();\r\n  const whiteListStart = toDate(whitelistSettings.startDate)?.getTime();\r\n  const whiteListEnd = toDate(whitelistSettings.endDate)?.getTime();\r\n  const publicSaleStart = toDate(publicSaleSettings.startDate)?.getTime();\r\n  const publicSaleEnd = toDate(publicSaleSettings.endDate)?.getTime();\r\n\r\n//Countdown, WhiteList Minting, Public Minting,\r\n\r\n\r\n\r\n  if (publicSaleStart && curr > publicSaleStart) {\r\n\r\n    return Phase.PublicMint;\r\n  } \r\n  else if (whitelistSettings.enabled && whiteListStart && whiteListEnd && curr > whiteListStart && curr < whiteListEnd ) {\r\n    return Phase.WhiteListMint;\r\n  } else {\r\n  return Phase.Welcome;\r\n  }\r\n\r\n}\r\n\r\nconst Header = (props: {\r\n  phaseName: string;\r\n  desc: string;\r\n  date?: anchor.BN | undefined;\r\n  status?: string;\r\n  countdown?: boolean;\r\n  countdownEnable?: boolean;\r\n}) => {\r\n  const { phaseName, desc, date, status, countdownEnable } = props;\r\n  return (\r\n    <>\r\n    <Grid container justifyContent=\"center\" className='mintHeader pb-2' alignItems='center'>\r\n      <Grid xs={12} justifyContent=\"center\" direction=\"column\">\r\n        <Typography variant=\"h5\" style={{ fontWeight: 600 }}>\r\n          {phaseName}\r\n        </Typography>\r\n        \r\n      </Grid>\r\n      <Grid xs={12} container justifyContent=\"center\">\r\n      {countdownEnable === true && (\r\n          <PhaseCountdown\r\n          date={toDate(date)}\r\n          style={{ justifyContent: 'flex-end' }}\r\n          status={status || 'COMPLETE'}\r\n        />\r\n        )}\r\n        \r\n      </Grid>\r\n    </Grid>\r\n    <Typography className='pb-2' variant=\"body1\" color=\"textSecondary\">\r\n      {desc}\r\n    </Typography>\r\n  </>\r\n  );\r\n};\r\n\r\ntype PhaseHeaderProps = {\r\n  phase: Phase;\r\n  fairLaunch?: FairLaunchAccount;\r\n  candyMachine?: CandyMachineAccount;\r\n  candyMachinePredatesFairLaunch: boolean;\r\n  rpcUrl: string;\r\n};\r\n\r\nexport const PhaseHeader = ({\r\n  phase,\r\n  fairLaunch,\r\n  candyMachine,\r\n  candyMachinePredatesFairLaunch,\r\n  rpcUrl,\r\n}: PhaseHeaderProps) => {\r\n  const wallet = useWallet();\r\n  console.log('D', candyMachine);\r\n  console.log('Wallet', wallet);\r\n\r\n  return (\r\n    <>\r\n     \r\n      {phase === Phase.Welcome && !candyMachine && (\r\n        <Header\r\n          phaseName={welcomeSettings.title}\r\n          desc={welcomeSettings.desc}\r\n          date={welcomeSettings.countdownTo}\r\n          countdownEnable={welcomeSettings.countdownEnable}\r\n        />\r\n      )}\r\n\r\n      {phase === Phase.Welcome && candyMachine && (\r\n        <Header\r\n          phaseName={welcomeSettings.title2}\r\n          desc={welcomeSettings.desc2}\r\n          date={welcomeSettings.countdownTo}\r\n          countdownEnable={welcomeSettings.countdownEnable}\r\n        />\r\n      )}\r\n\r\n        {phase === Phase.WhiteListMint && candyMachine && (\r\n        <>\r\n        <Header\r\n          phaseName={whitelistSettings.title}\r\n          desc={whitelistSettings.desc}\r\n          date={whitelistSettings.endDate}\r\n          countdownEnable={whitelistSettings.countdown}\r\n          status=\"WHITELIST LIVE\"\r\n        />\r\n        {whitelistSettings.itemsAvailable === true && (\r\n          <p className='pb-2'>Items Available: {candyMachine?.state.itemsAvailable}</p>\r\n        )}\r\n        {whitelistSettings.itemsRemaining === true && (\r\n          <p className='pb-2'>Items Remaining: {candyMachine?.state.itemsRemaining}</p>\r\n        )}\r\n        {whitelistSettings.itemsRedeemed === true && (\r\n          <p className='pb-2'>Items Redeemed: {candyMachine?.state.itemsRedeemed}</p>\r\n        )}\r\n      \r\n        </>  \r\n        \r\n      )}\r\n\r\n      {phase === Phase.WhiteListMint && !candyMachine && (\r\n        <>\r\n        <Header\r\n          phaseName={whitelistSettings.title2}\r\n          desc={whitelistSettings.desc2}\r\n          date={whitelistSettings.endDate}\r\n          countdownEnable={whitelistSettings.countdown}\r\n          status=\"WHITELIST LIVE\"\r\n        />\r\n      \r\n        </>  \r\n        \r\n      )}\r\n\r\n\r\n      {phase === Phase.PublicMint && candyMachine && (\r\n        <>\r\n        <Header\r\n          phaseName={publicSaleSettings.title}\r\n          desc={publicSaleSettings.desc}\r\n          date={publicSaleSettings.endDate}\r\n          countdownEnable={publicSaleSettings.countdown}\r\n          status=\"LIVE\"\r\n        />\r\n        {publicSaleSettings.itemsAvailable === true && (\r\n          <p className='pb-2'>Items Available: {candyMachine?.state.itemsAvailable}</p>\r\n        )}\r\n        {publicSaleSettings.itemsRemaining === true && (\r\n          <p className='pb-2'>Items Remaining: {candyMachine?.state.itemsRemaining}</p>\r\n        )}\r\n        {publicSaleSettings.itemsRedeemed === true && (\r\n          <p className='pb-2'>Items Redeemed: {candyMachine?.state.itemsRedeemed}</p>\r\n        )}\r\n      \r\n        </>  \r\n        \r\n      )}\r\n\r\n      {phase === Phase.PublicMint && !candyMachine && (\r\n        <>\r\n        <Header\r\n          phaseName={publicSaleSettings.title}\r\n          desc={publicSaleSettings.desc}\r\n          date={publicSaleSettings.endDate}\r\n          countdownEnable={publicSaleSettings.countdown}\r\n          status=\"LIVE\"\r\n        />\r\n      \r\n        </>  \r\n        \r\n      )}\r\n        \r\n    </>\r\n  );\r\n};","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { FairLaunchAccount } from './fair-launch';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { whitelistSettings, publicSaleSettings } from './userSettings';\r\nimport { toDate }  from './utils'\r\n\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  fairLaunch,\r\n  isMinting,\r\n  fairLaunchBalance,\r\n  \r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine: CandyMachineAccount | undefined;\r\n  fairLaunch?: FairLaunchAccount | undefined;\r\n  isMinting: boolean;\r\n  fairLaunchBalance: number;\r\n}) => {\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [clicked, setClicked] = useState(false);\r\n  const whitelistStartDate = toDate(whitelistSettings.startDate)?.getTime();\r\n  const whitelistEndDate = toDate(whitelistSettings.endDate)?.getTime();\r\n  const publicMintStart = toDate(publicSaleSettings.startDate)?.getTime();\r\n  const publicMintEnd = toDate(publicSaleSettings.endDate)?.getTime();\r\n\r\n  function whiteListSaleCheck() {\r\n    if (whitelistSettings.enabled && (whitelistStartDate && whitelistEndDate ) && Date.now() > whitelistStartDate && Date.now() < whitelistEndDate) {\r\n      \r\n      return true\r\n    } else {\r\n      \r\n      return false\r\n    }\r\n  }\r\n  \r\n  let WhitelistMintActive = whiteListSaleCheck()\r\n  console.log('is Whitelist Sale Active? ' + whiteListSaleCheck())\r\n\r\n  function publicSaleCheck() {\r\n\r\n    if (publicMintStart && publicMintEnd){\r\n      if(Date.now() > publicMintStart && Date.now() < publicMintEnd){\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n    else if (publicMintStart) {\r\n      if (Date.now() > publicMintStart){\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    \r\n    }\r\n\r\n\r\n  }\r\n\r\n  let PublicMintActive = publicSaleCheck()\r\n\r\n  console.log('is public sale live? '+ publicSaleCheck())\r\n  \r\n  console.log(candyMachine?.state.isSoldOut, isMinting, (WhitelistMintActive || PublicMintActive) ,!candyMachine?.state.isActive)\r\n\r\n  useEffect(() => {\r\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n      console.log('Minting');\r\n      onMint();\r\n      setClicked(false);\r\n    }\r\n  }, [gatewayStatus, clicked, setClicked, onMint]);\r\n  return (\r\n    <CTAButton\r\n      disabled={\r\n        candyMachine?.state.isSoldOut ||\r\n        isMinting ||\r\n        !(WhitelistMintActive || PublicMintActive)\r\n        \r\n\r\n      }\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          console.log('gatekeeper active')\r\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n            console.log(gatewayStatus + GatewayStatus.ACTIVE)\r\n            setClicked(true);\r\n          } else {\r\n            console.log('requeting token')\r\n             let token = await requestGatewayToken();\r\n            console.log(token);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {fairLaunch?.ticket?.data?.state.punched && fairLaunchBalance === 0 ? (\r\n        'MINTED'\r\n      ) : candyMachine?.state.isSoldOut ? (\r\n        'SOLD OUT'\r\n      ) : isMinting ? (\r\n        <CircularProgress />\r\n      \r\n      ) : (\r\n        'MINT'\r\n      )}\r\n    </CTAButton>\r\n  );\r\n};","import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { useState } from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.5),\r\n        marginRight: 0,\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: theme.spacing(1),\r\n      marginRight: 0,\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    }\r\n  }),\r\n);\r\n\r\n\r\ninterface PhaseCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n  start?: Date;\r\n  end?: Date;\r\n}\r\n\r\ninterface CountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const PhaseCountdown: React.FC<PhaseCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  start,\r\n  end,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [isFixed, setIsFixed] = useState(start && end && date ? start.getTime() - Date.now() < 0 : false);\r\n\r\n  const renderCountdown = ({ days, hours, minutes, seconds, completed }: CountdownRender) => {\r\n    hours += days * 24\r\n    if (completed) {\r\n      return status ? <span className={classes.done}  >{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style} >\r\n          {isFixed && <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              +\r\n            </span>\r\n          </Paper>}\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  if (date && start && end) {\r\n    if (isFixed) {\r\n      <Countdown\r\n        date={start}\r\n        now={() => end.getTime()}\r\n        onComplete={() => setIsFixed(false)}\r\n        renderer={renderCountdown}\r\n      />\r\n    }\r\n  }\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n","import { useEffect, useMemo, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n  CircularProgress,\r\n  Container,\r\n  IconButton,\r\n  Link,\r\n  Slider,\r\n  Snackbar,\r\n} from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { createStyles, Theme } from '@material-ui/core/styles';\r\n\r\n\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\r\n\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from './candy-machine';\r\n\r\nimport {\r\n  FairLaunchAccount,\r\n  getFairLaunchState,\r\n  punchTicket,\r\n  purchaseTicket,\r\n} from './fair-launch';\r\n\r\nimport { AlertState, formatNumber, getAtaForMint, toDate, formatSol } from './utils';\r\nimport { CTAButton, MintButton } from './MintButton';\r\nimport { getPhase, Phase, PhaseHeader } from './PhaseHeader';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport { walletSettings} from './userSettings';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your styles here\r\n\r\nconst dialogStyles: any = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\n\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  fairLaunchId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst FAIR_LAUNCH_LOTTERY_SIZE =\r\n  8 + // discriminator\r\n  32 + // fair launch\r\n  1 + // bump\r\n  8; // size of bitmask ones\r\n\r\nconst isWinner = (fairLaunch: FairLaunchAccount | undefined): boolean => {\r\n  if (\r\n    !fairLaunch?.lottery.data ||\r\n    !fairLaunch?.lottery.data.length ||\r\n    !fairLaunch?.ticket.data?.seq ||\r\n    !fairLaunch?.state.phaseThreeStarted\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  const myByte =\r\n    fairLaunch.lottery.data[\r\n      FAIR_LAUNCH_LOTTERY_SIZE +\r\n        Math.floor(fairLaunch.ticket.data?.seq.toNumber() / 8)\r\n    ];\r\n\r\n  const positionFromRight = 7 - (fairLaunch.ticket.data?.seq.toNumber() % 8);\r\n  const mask = Math.pow(2, positionFromRight);\r\n  const isWinner = myByte & mask;\r\n  return isWinner > 0;\r\n};\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [fairLaunchBalance, setFairLaunchBalance] = useState<number>(0);\r\n  const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\r\n  const rpcUrl = props.rpcHost;\r\n\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [contributed, setContributed] = useState(0);\r\n\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n\r\n  const [fairLaunch, setFairLaunch] = useState<FairLaunchAccount>();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      document.getElementById('#identity')?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        if (fairLaunch?.ticket.data?.state.unpunched && isWinner(fairLaunch)) {\r\n          await onPunchTicket();\r\n        }\r\n\r\n        const mintTxId = (\r\n          await mintOneToken(candyMachine, wallet.publicKey)\r\n        )[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            'singleGossip',\r\n            true,\r\n          );\r\n        }\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction Timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x138')) {\r\n        } else if (error.message.indexOf('0x137')) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: 'error',\r\n      });\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!anchorWallet) {\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const balance = await props.connection.getBalance(\r\n          anchorWallet.publicKey,\r\n        );\r\n        setYourSOLBalance(balance);\r\n\r\n        const whiteListTokens = await props.connection.getTokenAccountBalance(\r\n          walletSettings.whiteListTokenId\r\n        );\r\n\r\n          console.log(whiteListTokens)\r\n          \r\n        if (props.fairLaunchId) {\r\n          const state = await getFairLaunchState(\r\n            anchorWallet,\r\n            props.fairLaunchId,\r\n            props.connection,\r\n          );\r\n\r\n          setFairLaunch(state);\r\n\r\n          try {\r\n            if (state.state.tokenMint) {\r\n              const fairLaunchBalance =\r\n                await props.connection.getTokenAccountBalance(\r\n                  (\r\n                    await getAtaForMint(\r\n                      state.state.tokenMint,\r\n                      anchorWallet.publicKey,\r\n                    )\r\n                  )[0],\r\n                );\r\n\r\n              if (fairLaunchBalance.value) {\r\n                setFairLaunchBalance(fairLaunchBalance.value.uiAmount || 0);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            console.log('Problem getting fair launch token balance');\r\n            console.log(e);\r\n          }\r\n          if (contributed === 0) {\r\n            const phase = getPhase(state, undefined);\r\n\r\n            if (phase === Phase.SetPrice) {\r\n              const ticks =\r\n                (state.state.data.priceRangeEnd.toNumber() -\r\n                  state.state.data.priceRangeStart.toNumber()) /\r\n                state.state.data.tickSize.toNumber();\r\n              const randomTick = Math.round(Math.random() * ticks);\r\n\r\n              setContributed(\r\n                (state.state.data.priceRangeStart.toNumber() +\r\n                  randomTick * state.state.data.tickSize.toNumber()) /\r\n                  LAMPORTS_PER_SOL,\r\n              );\r\n            } else {\r\n              setContributed(\r\n                (\r\n                  state.state.currentMedian || state.state.data.priceRangeStart\r\n                ).toNumber() / LAMPORTS_PER_SOL,\r\n              );\r\n            }\r\n          }\r\n        } else {\r\n          console.log('No fair launch detected in configuration.');\r\n        }\r\n      } catch (e) {\r\n        console.log('Problem getting fair launch state');\r\n        console.log(e);\r\n      }\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet,\r\n            props.candyMachineId,\r\n            props.connection,\r\n          );\r\n          setCandyMachine(cndy);\r\n        } catch (e) {\r\n          console.log('Problem getting candy machine state');\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        console.log('No candy machine detected in configuration.');\r\n      }\r\n    })();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    props.fairLaunchId,\r\n    contributed,\r\n  ]);\r\n\r\n  const min = formatNumber.asNumber(fairLaunch?.state.data.priceRangeStart);\r\n  const max = formatNumber.asNumber(fairLaunch?.state.data.priceRangeEnd);\r\n  const step = formatNumber.asNumber(fairLaunch?.state.data.tickSize);\r\n  const median = formatNumber.asNumber(fairLaunch?.state.currentMedian);\r\n  const phase = getPhase(fairLaunch, candyMachine);\r\n  console.log('Phase', phase);\r\n  const marks = [\r\n    {\r\n      value: min || 0,\r\n      label: `${min} SOL`,\r\n    },\r\n    // TODO:L\r\n    ...(phase === Phase.SetPrice\r\n      ? []\r\n      : [\r\n          {\r\n            value: median || 0,\r\n            label: `${median}`,\r\n          },\r\n        ]),\r\n    // display user comitted value\r\n    // {\r\n    //   value: 37,\r\n    //   label: '37°C',\r\n    // },\r\n    {\r\n      value: max || 0,\r\n      label: `${max} SOL`,\r\n    },\r\n  ].filter(_ => _ !== undefined && _.value !== 0) as any;\r\n\r\n  \r\n  const onRefundTicket = async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    console.log('refund');\r\n    try {\r\n      setIsMinting(true);\r\n      await purchaseTicket(0, anchorWallet, fairLaunch);\r\n      setIsMinting(false);\r\n      setAlertState({\r\n        open: true,\r\n        message:\r\n          'Congratulations! Funds withdrawn. This is an irreversible action.',\r\n        severity: 'success',\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      setIsMinting(false);\r\n      setAlertState({\r\n        open: true,\r\n        message: 'Something went wrong.',\r\n        severity: 'error',\r\n      });\r\n    }\r\n  };\r\n\r\n  const onPunchTicket = async () => {\r\n    if (!anchorWallet || !fairLaunch || !fairLaunch.ticket) {\r\n      return;\r\n    }\r\n\r\n    console.log('punch');\r\n    setIsMinting(true);\r\n    try {\r\n      await punchTicket(anchorWallet, fairLaunch);\r\n      setIsMinting(false);\r\n      setAlertState({\r\n        open: true,\r\n        message: 'Congratulations! Ticket punched!',\r\n        severity: 'success',\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      setIsMinting(false);\r\n      setAlertState({\r\n        open: true,\r\n        message: 'Something went wrong.',\r\n        severity: 'error',\r\n      });\r\n    }\r\n  };\r\n\r\n  const candyMachinePredatesFairLaunch =\r\n    candyMachine?.state.goLiveDate &&\r\n    fairLaunch?.state.data.phaseTwoEnd &&\r\n    candyMachine?.state.goLiveDate.lt(fairLaunch?.state.data.phaseTwoEnd);\r\n\r\n  const notEnoughSOL = !!(\r\n    yourSOLBalance != null &&\r\n    fairLaunch?.state.data.priceRangeStart &&\r\n    fairLaunch?.state.data.fee &&\r\n    yourSOLBalance + (fairLaunch?.ticket?.data?.amount.toNumber() || 0) <\r\n      contributed * LAMPORTS_PER_SOL +\r\n        fairLaunch?.state.data.fee.toNumber() +\r\n        0.01\r\n  );\r\n\r\n  return (\r\n    <Container>\r\n      \r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{ padding: 24, backgroundColor: '#151A1F', borderRadius: 6 }}\r\n        >\r\n          <Grid container justifyContent=\"center\" direction=\"column\">\r\n            <PhaseHeader\r\n              phase={phase}\r\n              fairLaunch={fairLaunch}\r\n              candyMachine={candyMachine}\r\n              rpcUrl={rpcUrl}\r\n              candyMachinePredatesFairLaunch={!!candyMachinePredatesFairLaunch}\r\n            />\r\n\r\n            {!wallet.connected ? (\r\n              <ConnectButton>\r\n                Connect{' '}\r\n                {[Phase.SetPrice].includes(phase) ? 'to bid' : 'to see status'}\r\n              </ConnectButton>\r\n            ) : (\r\n              <div>\r\n\r\n                {(phase === Phase.PublicMint || Phase.WhiteListMint) && (\r\n                  <>\r\n                    {(!fairLaunch ||\r\n                      isWinner(fairLaunch) ||\r\n                      fairLaunchBalance > 0) && (\r\n                      <MintContainer>\r\n                        \r\n                        {candyMachine?.state.isActive &&\r\n                        candyMachine?.state.gatekeeper &&\r\n                        wallet.publicKey &&\r\n                        wallet.signTransaction ? (\r\n                          <GatewayProvider\r\n                            wallet={{\r\n                              publicKey:\r\n                                wallet.publicKey ||\r\n                                new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                              //@ts-ignore\r\n                              signTransaction: wallet.signTransaction,\r\n                            }}\r\n                            // // Replace with following when added\r\n                            // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                            gatekeeperNetwork={\r\n                              candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                            } // This is the ignite (captcha) network\r\n                            /// Don't need this for mainnet\r\n                            clusterUrl={rpcUrl}\r\n                            options={{ autoShowModal: false }}\r\n                          >\r\n                            <MintButton\r\n                              candyMachine={candyMachine}\r\n                              fairLaunch={fairLaunch}\r\n                              isMinting={isMinting}\r\n                              fairLaunchBalance={fairLaunchBalance}\r\n                              onMint={onMint}\r\n                            />\r\n                          </GatewayProvider>\r\n                        ) : (\r\n                          <MintButton\r\n                            candyMachine={candyMachine}\r\n                            fairLaunch={fairLaunch}\r\n                            isMinting={isMinting}\r\n                            fairLaunchBalance={fairLaunchBalance}\r\n                            onMint={onMint}\r\n                          />\r\n                        )}\r\n                      </MintContainer>\r\n                    )}\r\n\r\n                    {!(\r\n                      !fairLaunch ||\r\n                      isWinner(fairLaunch) ||\r\n                      fairLaunchBalance > 0\r\n                    ) && (\r\n                      <CTAButton\r\n                        onClick={onRefundTicket}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                          isMinting ||\r\n                          fairLaunch?.ticket.data === undefined ||\r\n                          fairLaunch?.ticket.data?.state.withdrawn !== undefined\r\n                        }\r\n                      >\r\n                        {isMinting ? <CircularProgress /> : 'Withdraw'}\r\n                      </CTAButton>\r\n                    )}\r\n                  </>\r\n                )}\r\n\r\n              </div>\r\n            )}\r\n\r\n            <Grid\r\n              container\r\n              justifyContent=\"space-between\"\r\n              color=\"textSecondary\"\r\n            >\r\n              \r\n            </Grid>\r\n\r\n            {/* {wallet.connected && (\r\n              <p>\r\n                Address: {shortenAddress(wallet.publicKey?.toBase58() || '')}\r\n              </p>\r\n            )}\r\n             \r\n\r\n             */}\r\n\r\n            {wallet.connected && walletSettings.showBalance && (\r\n              <p className='text-end'>Balance: {formatSol((yourSOLBalance || 0 )).toLocaleString()} SOL</p>\r\n            )}\r\n\r\n           \r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useContext, useEffect, useMemo, useRef } from 'react';\r\nimport confetti from 'canvas-confetti';\r\n\r\nexport interface ConfettiContextState {\r\n  dropConfetti: () => void;\r\n}\r\n\r\nconst ConfettiContext = React.createContext<ConfettiContextState | null>(null);\r\n\r\nexport const ConfettiProvider = ({ children = null as any }) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>();\r\n  const confettiRef = useRef<confetti.CreateTypes>();\r\n\r\n  const dropConfetti = useMemo(\r\n    () => () => {\r\n      if (confettiRef.current && canvasRef.current) {\r\n        canvasRef.current.style.visibility = 'visible';\r\n        confettiRef\r\n          .current({\r\n            particleCount: 400,\r\n            spread: 160,\r\n            origin: { y: 0.3 },\r\n          })\r\n          ?.finally(() => {\r\n            if (canvasRef.current) {\r\n              canvasRef.current.style.visibility = 'hidden';\r\n            }\r\n          });\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (canvasRef.current && !confettiRef.current) {\r\n      canvasRef.current.style.visibility = 'hidden';\r\n      confettiRef.current = confetti.create(canvasRef.current, {\r\n        resize: true,\r\n        useWorker: true,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const canvasStyle: React.CSSProperties = {\r\n    width: '100vw',\r\n    height: '100vh',\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    top: 0,\r\n    left: 0,\r\n  };\r\n\r\n  return (\r\n    <ConfettiContext.Provider value={{ dropConfetti }}>\r\n      <canvas ref={canvasRef as any} style={canvasStyle} />\r\n      {children}\r\n    </ConfettiContext.Provider>\r\n  );\r\n};\r\n\r\nexport const Confetti = () => {\r\n  const { dropConfetti } = useConfetti();\r\n\r\n  useEffect(() => {\r\n    dropConfetti();\r\n  }, [dropConfetti]);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport const useConfetti = () => {\r\n  const context = useContext(ConfettiContext);\r\n  return context as ConfettiContextState;\r\n};\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport Minter from \"./Minter\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\nimport { ThemeProvider, createTheme } from \"@material-ui/core\";\r\nimport { ConfettiProvider } from \"./confetti\";\r\n\r\nimport banner from \"./image/banner.jpg\"\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n});\r\n\r\nconst candyMachineId = process.env.REACT_APP_CANDY_MACHINE_ID\r\n  ? new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID)\r\n  : undefined;\r\n\r\nconst fairLaunchId = process.env.REACT_APP_FAIR_LAUNCH_ID\r\n  ? new anchor.web3.PublicKey(process.env.REACT_APP_FAIR_LAUNCH_ID)\r\n  : undefined;\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\r\n    []\r\n  );\r\n\r\n  function toggleMenu() {\r\n    const menu = document.getElementById(\"mobileNavContainer\")!;\r\n    menu.classList.toggle(\"open-menu\");\r\n    console.log(\"pressed\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      \r\n      \r\n      <div className=\"content-wrapper\">\r\n          <header className=\"card\" id=\"link1\">\r\n            <div style={{ padding: \"0 24px 0 24px 0\" }}>\r\n              <h3 className=\"text-secondary-color\">Welcome To</h3>\r\n              <h1 className=\"pb-3\">MYEGGS NFT</h1>\r\n              <p className=\"text-secondary-color\">\r\n              My Eggs are a total of 3,333 unique digital collectibles programmatically generated using an open-source Python script.Myeggs used in a generative art project with custom on-chain and cryptographically secure provenance.\r\n              </p>\r\n              <a href=\"https://myeggs.art\"><button className=\"button\">Go back</button></a>\r\n              <a href=\"\"></a>\r\n            </div>\r\n            <div>\r\n              <ThemeProvider theme={theme}>\r\n                <ConnectionProvider endpoint={endpoint}>\r\n                  <WalletProvider wallets={wallets} autoConnect>\r\n                    <WalletDialogProvider>\r\n                      <ConfettiProvider>\r\n                        <Minter\r\n                          candyMachineId={candyMachineId}\r\n                          fairLaunchId={fairLaunchId}\r\n                          connection={connection}\r\n                          startDate={startDateSeed}\r\n                          txTimeout={txTimeout}\r\n                          rpcHost={rpcHost}\r\n                        />\r\n                      </ConfettiProvider>\r\n                    </WalletDialogProvider>\r\n                  </WalletProvider>\r\n                </ConnectionProvider>\r\n              </ThemeProvider>\r\n            </div>\r\n          </header>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}